{"version":3,"sources":["Posts.jsx","actions.js","App.js","reducer.js","index.js"],"names":["Posts","dispatch","useDispatch","state","useSelector","useEffect","getState","a","type","Axios","get","response","payload","data","error","loading","items","map","el","title","App","className","initState","postsReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"2MA6BeA,EAzBD,WACZ,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAErCE,qBAAU,WACRJ,EC0DsB,uCAAM,WAAOA,EAAUK,GAAjB,eAAAC,EAAA,6DAE9BN,EAAS,CAAEO,KAAM,wBAFa,kBAKLC,IAAMC,IAC3B,8CAN0B,OAKtBC,EALsB,OAQ5BV,EAAS,CAAEO,KAAM,sBAAuBI,QAASD,EAASE,OAR9B,gDAU5BZ,EAAS,CAAEO,KAAM,sBAAuBM,MAAK,OAVjB,yDAAN,2DDzDrB,CAACb,IASJ,OACE,8BAPIE,EAAMY,QACD,4CAGFZ,EAAMa,MAAMC,KAAI,SAACC,GAAD,OAAQ,6BAAKA,EAAGC,cEP5BC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,cCLAC,EAAY,CAChBN,MAAO,GACPD,SAAS,EACTD,MAAO,MAwBMS,EArBM,WAAgC,IAA/BpB,EAA8B,uDAAtBmB,EAAWE,EAAW,uCAClD,OAAQA,EAAOhB,MACb,IAAK,sBACH,OAAO,2BACFL,GADL,IAEEY,SAAS,EACTD,MAAO,OAEX,IAAK,sBACH,OAAO,2BACFX,GADL,IAEEY,SAAS,EACTC,MAAOQ,EAAOZ,QAEdE,MAAOU,EAAOV,QAElB,QACE,OAAOX,I,gBCdPsB,EAAQC,sBACZH,EACAI,8BAAoBC,0BAAgBC,OAGtCC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.b8f4a4e7.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPosts } from \"./actions\";\n\nconst Posts = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  const renderPosts = () => {\n    if (state.loading) {\n      return <h1>Loading...</h1>;\n    }\n\n    return state.items.map((el) => <h3>{el.title}</h3>);\n  };\n  return (\n    <div>\n      {renderPosts()}\n      {/* {posts.map((el) => (\n        <h3>{el.title}</h3>\n      ))} */}\n    </div>\n  );\n};\n\nexport default Posts;\n","import Axios from \"axios\";\n// action creators handle the api requests instead of the components\n\n// action creator has to return an action object - action object always has a type\n// we also want the action creator to handle the logic of fetching the data\n\n// FETCHPOSTS NOT WORKING\n// 1. action creators can only return plain javascript objects with a type property\n//    if we try to return anything else other than a plain js object we will get an error\n\n// 2. the action will get sent to the reducer before the data is fetched from the API\n\n// export const fetchPosts = async () => {\n//   const response = await Axios.get(\n//     \"https://jsonplaceholder.typicode.com/posts\"\n//   );\n\n//   // a payload property is added to the action object which receives the data\n//   return {\n//     type: \"FETCH_POSTS\",\n//     payload: response.data,\n//   };\n// };\n\n// to get the action creator to perform async actions we need to use a middleware\n// like the above the action is sent to the reducer in around 0.1/0.2s, before the data has time to\n// fetch the data - around 0.5s\n// 3rd party middleware is needed to solve this issue\n\n// redux thunk does one thing - allows action creators to return an object or return a function\n// redux only cares what the action creator returns (outer function)\n// it doesnt care what the inner function returns - so we can use async/await without any issues\n\n// where now pausing the action from being dispatched - we need to wait to we get a response back from api\n// only once we get the response do we continue dispatching the action\n\n// export const fetchPosts = () => {\n//   // we can now return a function with thunk\n//   // because we now have redux middleware we can return a function instead of just an action object\n//   return async (dispatch, getState) => {\n//     const response = await Axios.get(\n//       \"https://jsonplaceholder.typicode.com/posts\"\n//     );\n//     console.log(response.data);\n//     // once we get back a response we manually dispatch an action object\n//     dispatch({\n//       type: \"FETCH_POSTS\",\n//       payload: response.data,\n//     });\n//   };\n// };\n\n// SHORTHAND FOR ABOVE\n// export const fetchPosts = () => async (dispatch, getState) => {\n//   const response = await Axios.get(\n//     \"https://jsonplaceholder.typicode.com/posts\"\n//   );\n//   console.log(response.data);\n//   dispatch({\n//     type: \"FETCH_POSTS\",\n//     payload: response.data,\n//   });\n// };\n\n// make use of the REQUEST/SUCCESS/FAILURE pattern to handle loading and error state\n// seperate action for REQUEST, SUCCESS and failure\n\nexport const fetchPosts = () => async (dispatch, getState) => {\n  // first try to get the data\n  dispatch({ type: \"FETCH_POSTS_REQUEST\" });\n\n  try {\n    const response = await Axios.get(\n      \"https://jsonplaceholder.typicode.com/posts\"\n    );\n    dispatch({ type: \"FETCH_POSTS_SUCCESS\", payload: response.data });\n  } catch (error) {\n    dispatch({ type: \"FETCH_POSTS_FAILURE\", error });\n  }\n};\n","import Posts from \"./Posts\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Posts />\n    </div>\n  );\n}\n\nexport default App;\n","const initState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\nconst postsReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"FETCH_POSTS_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: null, // clear out any previous errors\n      };\n    case \"FETCH_POSTS_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        items: action.payload,\n        // items: [...state.items, action.payload],\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport postsReducer from \"./reducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  postsReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}